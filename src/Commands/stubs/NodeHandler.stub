<?php
namespace App\Witchcraft\Handlers;

use Mariojgt\Witchcraft\Services\NodeHandlers\BaseNodeHandler;

class {{className}} extends BaseNodeHandler
{
    /**
     * Handle the node execution
     *
     * @param array $node The node configuration data
     * @param array $variables Available workflow variables
     * @return array Result array with success, output, and message
     */
    public function handle(array $node, array $variables): array
    {
        try {
            // Extract node configuration data
            $exampleInput = $this->getData($node, 'example');
            $outputKey = $this->getData($node, 'outputKey', '{{nodeType}}Result');
            $enableFeature = $this->getData($node, 'enableFeature', false);

            // Optional: Use extracted value from previous nodes
            $useExtractedValue = $this->getData($node, 'useExtractedValue', false);
            $sourceVariable = $this->getData($node, 'sourceVariable', 'extractedValue');

            // Validation: Check required fields
            if (empty($exampleInput) && !$useExtractedValue) {
                return $this->error('Example input is required when not using extracted value');
            }

            // Determine the value to process
            if ($useExtractedValue) {
                if (!isset($variables[$sourceVariable])) {
                    return $this->error("Source variable '{$sourceVariable}' not found in workflow variables");
                }
                $valueToProcess = $variables[$sourceVariable];
                $valueSource = "extracted from '{$sourceVariable}'";
            } else {
                // Process manual input with variable replacement
                $valueToProcess = $this->replaceVariables($exampleInput, $variables);
                $valueSource = 'manual input';
            }

            // Add your custom processing logic here
            $processedValue = $this->processValue($valueToProcess, $enableFeature);

            // Prepare output data
            $output = [
                $outputKey => $processedValue,
                'extractedValue' => $variables['extractedValue'] ?? null,
                'processedFrom' => $valueSource
            ];

            // Optional: Add additional output if feature is enabled
            if ($enableFeature) {
                $output['featureData'] = $this->getFeatureData($processedValue);
            }

            return $this->success(
                $output,
                "{{className}} processed value from {$valueSource} successfully"
            );

        } catch (\Exception $e) {
            return $this->error("{{className}} processing failed: " . $e->getMessage());
        }
    }

    /**
     * Process the input value with your custom logic
     *
     * @param mixed $value The value to process
     * @param bool $enableFeature Whether feature is enabled
     * @return mixed The processed value
     */
    private function processValue($value, bool $enableFeature)
    {
        // TODO: Replace this with your actual processing logic

        if ($enableFeature) {
            // Enhanced processing when feature is enabled
            return strtoupper($value) . ' [ENHANCED]';
        }

        // Basic processing
        return strtoupper($value);
    }

    /**
     * Get additional feature data when feature is enabled
     *
     * @param mixed $processedValue The processed value
     * @return array Additional feature data
     */
    private function getFeatureData($processedValue): array
    {
        // TODO: Replace this with your actual feature logic
        return [
            'length' => strlen($processedValue),
            'timestamp' => now()->toISOString(),
            'enhanced' => true
        ];
    }
}
